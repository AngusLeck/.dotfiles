#!/usr/bin/env python

import os, string, sys
from datetime import datetime as dt

"""
All tasks sorted by priority (ls pri)
    (ls pri *** all) task priority 3
All task for project (ls ##Project Name)
Add task (a "*** Some task  ##Project name")
Delete task (d 1)
Hide ids of tasks (lsh)

"""


class TodoList(object):

    def __init__(self, path):
        p = TodoParser()

        self.projects = p.parse(path)

class TodoParser(object):

    def __init__(self):
        self.projects = []
        self.current_project = None
        self.count = 0
        self.completed_tasks = []

    def _parse_line(self, line):
        line = line.replace('\n', '')
        if len(line) == 0:
            return
        elif line[0] == '#':
            self._begin_project(line + '\n')
        elif line[0] == '*':
            self.current_project.add_item(line)
        elif line[0] == 'x':
            self.completed_tasks.append(line)

    def _begin_project(self, project):
        proj = Project(project, self.get_id)
        self.current_project = proj
        self.projects.append(proj)

    def get_id(self):
        self.count += 1
        return self.count

    def parse(self, path):
        self.path = path
        with open(path, 'w+') as f:
            for line in f.readlines():
                self._parse_line(line)

        return self.projects
    
    def save(self):
        with open(self.path, 'w') as f:
            for proj in self.projects:
                f.write(proj.__str__(True))

class Project(object):

    def __init__(self, title, get_id):
        self.title = title
        self.items = []
        self.get_id = get_id

    def add_item(self, raw_item):
        todo = Todo(self, raw_item)
        self.items.append(todo)
        self._order_by_priority()

    @property
    def count(self):
        return len(self.items)

    def _order_by_priority(self):
        self.items = sorted(
            self.items, 
            key=lambda item: len(item.priority), 
            reverse=True)

    def __str__(self, save=False):
        o = [self.title]
        for item in self.items:
            if save:
                item.set_for_save()
            o.append(item.__str__())
        o.append('Count: %d\n' % self.count)
        return ''.join(o)

class Todo(object):

    def __init__(self, parent, raw_item):
        self.title = ''
        self.complete_date = None
        self.priority = ''
        self.parent = parent
        self.id = parent.get_id()

        self._parse_item(raw_item)
        self.set_for_display()

    def _parse_item(self, raw_item):
        components = raw_item.split(' ')
        self.title = string.join(components[1:len(components)], ' ')
        self.priority = components[0]

    def complete(self):
        self.complete_date = dt.now()
        self.command = CommandFactory.create(CommandFactory.States.COMPLETE)

    def set_for_save(self):
        self.command = CommandFactory.create(CommandFactory.States.SAVE)

    def set_for_display(self):
        self.command = CommandFactory.create(CommandFactory.States.DISPLAY)

    def set_command(self, command):
        self.command = command

    def __str__(self):
        return self.command.execute(self)

class TodoDescriptionDecoratorBase(Todo):

    def __init__(self, todo):
        self._todo = todo

    def __getattr__(self, name):
        return getattr(self._todo, name)

class DescriptionCommand(object):
    THREE = '\033[95m'
    TWO = '\033[94m'
    #OKGREEN = '\033[92m'
    FOUR = '\033[93m'
    FIVE = '\033[91m'
    NORMAL = '\033[0m'

    def _get_color(self, pri=1):
        if pri == 1:
            return DescriptionCommand.NORMAL
        elif pri == 2:
            return DescriptionCommand.TWO
        elif pri == 3:
            return DescriptionCommand.THREE
        elif pri == 4:
            return DescriptionCommand.FOUR
        elif pri == 5:
            return DescriptionCommand.FIVE
        else:
            raise Exception, 'Unsupported priority %d' % pri

    def execute(self, todo):
        color = self._get_color(len(todo.priority))
        return color + '%d %s %s %s\n' % (
            todo.id,
            todo.priority,
            todo.title,
            DescriptionCommand.NORMAL)

class SaveDescriptionCommand(DescriptionCommand):

    def execute(self, todo):
        return '%s %s\n' % (todo.priority, todo.title)

class CompleteDescriptionCommand(DescriptionCommand):

    def execute(self, todo):
        return 'x %s %s Project: %s Completed: %s\n' % (
            todo.priority, 
            todo.title, 
            todo.parent.title,
            dt.now().strftime('%d-%m-%Y'))

class CommandFactory(object):

    class States:
        DISPLAY = 1
        SAVE = 2
        INTERACTION = 3
        COMPLETE = 4

    @staticmethod
    def create(state=1):
        r = DescriptionCommand()
        if state == CommandFactory.States.SAVE:
            r = SaveDescriptionCommand()
        elif state == CommandFactory.States.COMPLETE:
            r = CompleteDescriptionCommand()
        return r

class TodoState(object):

    def __init__(self, todo_list):
        self.todo_list = todo_list

    def add_item(self, item):
        pass

    def delete_item(self, id):
        pass

    def list_project(self, data={}):
        pass

class ListState(TodoState):

    def __init__(self, todo_list):
        super(ListState, self).__init__(todo_list)

    def list_project(self, data={}):
        if data.has_key('pri'):
            t = data['pri']
            if t:
                pass
                #sort by specific priority
            else:
                pass
                #show all sorted by priority
        elif data.has_key('project'):
            proj = data['project']
            #only show one project

def start(args=sys.argv):
    todo = TodoParser()
    TODO_LIST_PATH = os.environ['BETTER_TODO_LIST'] 

    todo.parse(TODO_LIST_PATH)

    for project in todo.projects:
        print project

    todo.save()

if __name__ == '__main__':start()